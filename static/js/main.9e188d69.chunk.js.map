{"version":3,"sources":["services/index.js","actions/index.js","pages/Login.js","components/Header.jsx","components/Inputs.jsx","components/Table.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["fetchCurrencies","a","fetch","request","json","response","sumExpensesAction","expensesSum","type","Login","state","email","password","shouldRedirect","handleChange","bind","isEmailValid","isPasswordValid","target","this","setState","name","value","registerEmail","validator","isEmail","length","props","id","htmlFor","data-testid","onChange","disabled","onClick","handleClick","to","React","Component","connect","dispatch","registerEmailAction","Header","toFixed","Inputs","min","step","description","placeholder","currencies","currency","map","curr","key","method","tag","action","valueInput","decriptionInput","currencyInput","methodInput","tagInput","addExpenseButton","Table","handleDeleteClick","updateExpensesSum","sumExpenses","expenses","expense","currentCurrency","currentExchangeRate","Object","entries","exchangeRates","find","ask","valueToBRL","parseInt","parseFloat","reduce","acc","current","expenseId","deleteRow","currentCurrencyName","convertedValue","createTableRow","wallet","deleteRowAction","Wallet","currentExpense","sendCurrenciesKeysToState","currenciesKeys","keys","indexOfUSTD","indexOf","slice","getUpdatedCurrencies","previousState","user","then","data","receiveCurrenciesAction","addExpenseAction","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","expenseWithCurrencies","indexOfTheExpenseId","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e188d69.chunk.js","sourcesContent":["const fetchCurrencies = async () => {\n  const endpoint = 'https://economia.awesomeapi.com.br/json/all';\n  const request = await fetch(endpoint);\n  const response = await request.json();\n\n  return response;\n};\n\nexport default fetchCurrencies;\n","import fetchCurrencies from '../services';\n\n// Coloque aqui suas actions\nexport const registerEmailAction = (email) => ({\n  type: 'REGISTER_EMAIL',\n  email,\n});\n\nexport const addExpenseAction = (expense, data) => ({\n  type: 'ADD_EXPENSE',\n  expense,\n  data,\n});\n\nexport const deleteRowAction = (expenseId) => ({\n  type: 'DELETE_ROW',\n  expenseId,\n});\n\nconst receiveCurrenciesAction = (data) => ({\n  type: 'RECEIVE_CURRENCIES',\n  data,\n});\n\nexport const sumExpensesAction = (expensesSum) => ({\n  type: 'SUM_EXPENSES',\n  expensesSum,\n});\n\nexport function getUpdatedCurrenciesThunk(currentExpense) {\n  return (dispatch) => fetchCurrencies()\n    .then((data) => {\n      dispatch(receiveCurrenciesAction(data));\n      dispatch(addExpenseAction(currentExpense, data));\n    });\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport validator from 'validator';\nimport { registerEmailAction } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      shouldRedirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.isEmailValid = this.isEmailValid.bind(this);\n    this.isPasswordValid = this.isPasswordValid.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  handleClick(registerEmail, email) {\n    registerEmail(email);\n\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  isEmailValid() {\n    const { email } = this.state;\n\n    return validator.isEmail(email);\n  }\n\n  isPasswordValid() {\n    const { password } = this.state;\n    const passwordMinimumLength = 6;\n\n    return password.length >= passwordMinimumLength;\n  }\n\n  render() {\n    const { email, password, shouldRedirect } = this.state;\n    const { registerEmail } = this.props;\n\n    return (\n      <div id=\"login\">\n        <form>\n          <fieldset>\n            <label htmlFor=\"email\">\n              Email:\n              <br />\n              <input\n                name=\"email\"\n                value={ email }\n                type=\"email\"\n                id=\"email\"\n                data-testid=\"email-input\"\n                onChange={ this.handleChange }\n              />\n            </label>\n            <label htmlFor=\"password\">\n              Senha:\n              <br />\n              <input\n                name=\"password\"\n                value={ password }\n                type=\"password\"\n                data-testid=\"password-input\"\n                onChange={ this.handleChange }\n              />\n            </label>\n            <button\n              type=\"button\"\n              disabled={ !this.isEmailValid() || !this.isPasswordValid() }\n              onClick={ () => {\n                this.handleClick(registerEmail, email);\n              } }\n            >\n              Entrar\n            </button>\n          </fieldset>\n        </form>\n        {shouldRedirect ? <Redirect to=\"/carteira\" /> : null}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  registerEmail: (email) => dispatch(registerEmailAction(email)),\n});\n\nLogin.propTypes = {\n  registerEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expensesSum } = this.props;\n\n    return (\n      <div id=\"wallet-header\">\n        <div id=\"trybe-logo\">Trybe Wallet</div>\n        <div id=\"user-info\">\n          <span data-testid=\"email-field\">{`Email: ${email}`}</span>\n          <span>\n            Despesa total:\n            <span data-testid=\"total-field\">\n              { ` R$ ${expensesSum ? expensesSum.toFixed(2) : 0}` }\n            </span>\n            <span data-testid=\"header-currency-field\">BRL</span>\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  expensesSum: PropTypes.number,\n}.isRequired;\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Inputs extends React.Component {\n  valueInput(handleChange) {\n    const { value } = this.props;\n\n    return (\n      <label htmlFor=\"value\">\n        Valor:\n        <input\n          onChange={ handleChange }\n          type=\"number\"\n          min={ 0 }\n          step={ 1 }\n          data-testid=\"value-input\"\n          name=\"value\"\n          id=\"value\"\n          value={ value }\n        />\n      </label>\n    );\n  }\n\n  decriptionInput(handleChange) {\n    const { description } = this.props;\n\n    return (\n      <label htmlFor=\"description\">\n        Descrição:\n        <input\n          onChange={ handleChange }\n          type=\"text\"\n          data-testid=\"description-input\"\n          name=\"description\"\n          id=\"description\"\n          placeholder=\"Digite aqui a decrição do gasto\"\n          value={ description }\n        />\n      </label>\n    );\n  }\n\n  currencyInput(currencies, handleChange) {\n    const { currency } = this.props;\n    return (\n      <label htmlFor=\"currency\">\n        Moeda:\n        <select\n          onChange={ handleChange }\n          value={ currency }\n          data-testid=\"currency-input\"\n          name=\"currency\"\n          id=\"currency\"\n        >\n          {currencies.map((curr) => (\n            <option data-testid={ curr } key={ curr } value={ curr }>\n              {curr}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  methodInput(handleChange) {\n    const { method } = this.props;\n    return (\n      <label htmlFor=\"method\">\n        Forma de pagamento:\n        <select\n          onChange={ handleChange }\n          value={ method }\n          data-testid=\"method-input\"\n          name=\"method\"\n          id=\"method\"\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n\n  tagInput(handleChange) {\n    const { tag } = this.props;\n    return (\n      <label htmlFor=\"tag\">\n        Tag:\n        <select\n          onChange={ handleChange }\n          value={ tag }\n          data-testid=\"tag-input\"\n          name=\"tag\"\n          id=\"tag\"\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  addExpenseButton(handleClick) {\n    return (\n      <button type=\"button\" onClick={ handleClick }>\n        Adicionar despesa\n      </button>\n    );\n  }\n\n  render() {\n    const { handleClick, currencies, handleChange } = this.props;\n\n    return (\n      <form action=\"\">\n        {this.valueInput(handleChange)}\n        {this.decriptionInput(handleChange)}\n        {this.currencyInput(currencies, handleChange)}\n        {this.methodInput(handleChange)}\n        {this.tagInput(handleChange)}\n        {this.addExpenseButton(handleClick)}\n      </form>\n    );\n  }\n}\n\nInputs.propTypes = {\n  value: PropTypes.number,\n  currency: PropTypes.string,\n  description: PropTypes.string,\n  method: PropTypes.string,\n  tag: PropTypes.string,\n}.isRequired;\n\nexport default Inputs;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRowAction, sumExpensesAction } from '../actions';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.updateExpensesSum();\n  }\n\n  updateExpensesSum() {\n    const { sumExpenses, expenses } = this.props;\n\n    const expensesSum = expenses\n      .map((expense) => {\n        const currentCurrency = expense.currency;\n        const currentExchangeRate = Object.entries(expense.exchangeRates)\n          .find((currency) => currency[0] === currentCurrency)[1].ask;\n\n        const valueToBRL = (parseInt(expense.value, 10) * currentExchangeRate);\n\n        return parseFloat(valueToBRL.toFixed(2));\n      })\n      .reduce((acc, current) => acc + current, 0);\n\n    sumExpenses(expensesSum);\n  }\n\n  handleDeleteClick(expenseId, deleteRow) {\n    deleteRow(expenseId);\n  }\n\n  createTableRow(expenses, deleteRow) {\n    return (\n      expenses.map((expense) => {\n        const currentCurrency = expense.currency;\n\n        const currentExchangeRate = Object.entries(expense.exchangeRates)\n          .find((currency) => currency[0] === currentCurrency)[1].ask;\n\n        const currentCurrencyName = Object.entries(expense.exchangeRates)\n          .find((currency) => currency[0] === currentCurrency)[1].name;\n\n        const convertedValue = parseFloat(\n          (parseInt(expense.value, 10) * currentExchangeRate).toFixed(2),\n        );\n\n        return (\n          <tr key={ expense.id }>\n            <td>{ expense.description }</td>\n            <td>{ expense.tag }</td>\n            <td>{ expense.method }</td>\n            <td>{ expense.value }</td>\n            <td>{ currentCurrencyName }</td>\n            <td>{ parseFloat(currentExchangeRate).toFixed(2) }</td>\n            <td>{ parseFloat(convertedValue).toFixed(2) }</td>\n            <td>Real</td>\n            <td>\n              <button type=\"button\">Editar</button>\n              <button\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                onClick={ () => this.handleDeleteClick(expense.id, deleteRow) }\n              >\n                Excluir\n              </button>\n            </td>\n          </tr>\n        );\n      })\n    );\n  }\n\n  render() {\n    const { expenses, deleteRow } = this.props;\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>\n              Editar/Excluir\n            </th>\n          </tr>\n\n        </thead>\n        <tbody>\n          {\n            this.createTableRow(expenses, deleteRow)\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteRow: (expenseId) => dispatch(deleteRowAction(expenseId)),\n  sumExpenses: (expensesSum) => dispatch(sumExpensesAction(expensesSum)),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf({}),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Inputs from '../components/Inputs';\nimport { getUpdatedCurrenciesThunk, sumExpensesAction } from '../actions';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currencies: [],\n      currentExpense: {\n        id: 0,\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n        value: 0,\n        description: '',\n      },\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.sumExpenses = this.sumExpenses.bind(this);\n  }\n\n  componentDidMount() {\n    this.sendCurrenciesKeysToState();\n  }\n\n  async fetchCurrencies() {\n    const request = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const response = await request.json();\n\n    return response;\n  }\n\n  async sendCurrenciesKeysToState() {\n    const currencies = await this.fetchCurrencies();\n    const currenciesKeys = Object.keys(currencies);\n    const indexOfUSTD = currenciesKeys.indexOf('USDT');\n\n    this.setState({\n      currencies: [\n        ...currenciesKeys.slice(0, indexOfUSTD),\n        ...currenciesKeys.slice(indexOfUSTD + 1, currencies.length),\n      ],\n    });\n  }\n\n  handleChange({ target }) {\n    const { currentExpense } = this.state;\n\n    this.setState({\n      currentExpense: {\n        ...currentExpense,\n        [target.name]: target.value,\n      },\n    });\n  }\n\n  sumExpenses() {\n    const { expenses, sumExpenses } = this.props;\n\n    const expensesSum = expenses\n      .map((expense) => {\n        const currentCurrency = expense.currency;\n        const currentExchangeRate = Object.entries(expense.exchangeRates)\n          .find((currency) => currency[0] === currentCurrency)[1].ask;\n\n        const valueToBRL = (parseInt(expense.value, 10) * currentExchangeRate);\n\n        return parseFloat(valueToBRL.toFixed(2));\n      })\n      .reduce((acc, current) => acc + current, 0);\n\n    sumExpenses(expensesSum);\n  }\n\n  async handleClick(currentExpense, getUpdatedCurrencies) {\n    await getUpdatedCurrencies(currentExpense);\n\n    this.sumExpenses();\n    this.setState((previousState) => ({\n      currentExpense: {\n        id: previousState.currentExpense.id + 1,\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n        value: 0,\n        description: '',\n      },\n    }));\n  }\n\n  render() {\n    const { currencies, currentExpense } = this.state;\n    const { currency, description, method, tag, value } = currentExpense;\n    const { email, getUpdatedCurrencies, expensesSum } = this.props;\n\n    return (\n      <div>\n        <header>\n          <Header email={ email } expensesSum={ expensesSum } />\n        </header>\n        <main>\n          <section id=\"inputs-section\">\n            <Inputs\n              handleChange={ this.handleChange }\n              currencies={ currencies }\n              handleClick={ () => this.handleClick(\n                currentExpense,\n                getUpdatedCurrencies,\n              ) }\n              currency={ currency }\n              description={ description }\n              method={ method }\n              tag={ tag }\n              value={ value }\n            />\n          </section>\n          <section id=\"table-section\">\n            <Table expensesSum={ expensesSum } />\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n  expensesSum: state.wallet.expensesSum,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUpdatedCurrencies: (expense) => dispatch(getUpdatedCurrenciesThunk(expense)),\n  sumExpenses: (expensesSum) => dispatch(sumExpensesAction(expensesSum)),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf({}),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'REGISTER_EMAIL':\n    return {\n      email: action.email,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  expensesSum: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  const expenseWithCurrencies = {\n    ...action.expense,\n    exchangeRates: action.data,\n  };\n\n  const indexOfTheExpenseId = state.expenses\n    .indexOf(state.expenses\n      .find((expense) => expense.id === action.expenseId));\n\n  switch (action.type) {\n  case 'ADD_EXPENSE':\n\n    return {\n      ...state,\n      expenses: [...state.expenses, expenseWithCurrencies],\n    };\n\n  case 'RECEIVE_CURRENCIES':\n    return {\n      ...state,\n      currencies: action.data,\n    };\n\n  case 'DELETE_ROW':\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses.slice(0, indexOfTheExpenseId),\n        ...state.expenses.slice(indexOfTheExpenseId + 1, state.expenses.length),\n      ],\n    };\n\n  case 'SUM_EXPENSES':\n    return {\n      ...state,\n      expensesSum: action.expensesSum,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}